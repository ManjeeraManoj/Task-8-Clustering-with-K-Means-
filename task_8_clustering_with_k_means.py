# -*- coding: utf-8 -*-
"""Task-8-Clustering-with-K-Means.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9u-CUgYR9QdtP-wSjxu39UaFtUbPCso
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler

# Load dataset
data = pd.read_csv("/content/Mall_Customers.csv")

# Drop CustomerID, keep relevant features
X = data.drop(['CustomerID', 'Gender'], axis=1)

# Standardize data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Elbow Method to find optimal K
inertia = []
K_range = range(1, 11)
for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot Elbow
plt.figure(figsize=(8,5))
plt.plot(K_range, inertia, 'bo-')
plt.xlabel("Number of clusters (k)")
plt.ylabel("Inertia")
plt.title("Elbow Method for Optimal k")
plt.grid(True)
plt.show()

# Fit KMeans with optimal k
optimal_k = 5  # Choose based on elbow graph
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Add cluster labels to original data
data['Cluster'] = clusters

# Visualize clusters (using Annual Income vs Spending Score)
plt.figure(figsize=(8,5))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', data=data, palette='tab10')
plt.title("Customer Segments")
plt.grid(True)
plt.show()

# Evaluate clustering with Silhouette Score
score = silhouette_score(X_scaled, clusters)
print(f"Silhouette Score: {score:.3f}")